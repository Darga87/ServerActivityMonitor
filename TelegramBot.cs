using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;

namespace ServerActivityMonitor
{
    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
    /// </summary>
    public class TelegramBot
    {
        // –ö–ª–∏–µ–Ω—Ç Telegram Bot API
        private readonly ITelegramBotClient _botClient;
        // –ú–æ–Ω–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        private readonly ServerMonitor _monitor;
        // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        private Timer? _monitoringTimer;
        // –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        private readonly HashSet<long> _subscribedChats;

        /// <summary>
        /// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ TelegramBot
        /// </summary>
        /// <param name="token">–¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram</param>
        public TelegramBot(string token)
        {
            _botClient = new TelegramBotClient(token);
            _monitor = new ServerMonitor();
            _subscribedChats = new HashSet<long>();
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º long polling
        /// </summary>
        public async Task StartAsync()
        {
            var cts = new CancellationTokenSource();
            
            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = Array.Empty<UpdateType>(),
                ThrowPendingUpdates = true
            };

            _botClient.StartReceiving(
                updateHandler: HandleUpdateAsync,
                pollingErrorHandler: HandlePollingErrorAsync,
                receiverOptions: receiverOptions,
                cancellationToken: cts.Token
            );

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            _monitoringTimer = new Timer(CheckSystemStatus, null, TimeSpan.Zero, TimeSpan.FromMinutes(5));

            var me = await _botClient.GetMeAsync();
            Console.WriteLine($"Bot started successfully. @{me.Username}");
        }

        /// <summary>
        /// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        private async void CheckSystemStatus(object? state)
        {
            if (_subscribedChats.Count == 0) return;

            var alerts = new List<string>();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU
            if (_monitor.MonitorCpuUsage(out double cpuUsage))
            {
                alerts.Add($"‚ö†Ô∏è High CPU usage: {cpuUsage:0.00}%");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
            if (_monitor.MonitorMemoryUsage(out double memoryUsage))
            {
                alerts.Add($"‚ö†Ô∏è High memory usage: {memoryUsage:0.00}%");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫–∏
            if (_monitor.MonitorDiskSpace())
            {
                alerts.Add("‚ö†Ô∏è Low disk space on one or more drives");
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (alerts.Count > 0)
            {
                var message = "üö® System Alert üö®\n" + string.Join("\n", alerts);
                foreach (var chatId in _subscribedChats)
                {
                    try
                    {
                        await _botClient.SendTextMessageAsync(chatId, message);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error sending alert to {chatId}: {ex.Message}");
                    }
                }
            }
        }

        private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            try
            {
                if (update.Message is not { } message)
                    return;
                if (message.Text is not { } messageText)
                    return;

                var chatId = message.Chat.Id;
                Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {messageText}");

                var command = messageText.Split(' ')[0].ToLower();
                await HandleCommand(chatId, command, cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
            }
        }

        private async Task HandleCommand(long chatId, string command, CancellationToken cancellationToken)
        {
            switch (command)
            {
                case "/start":
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Server Monitor Bot!\n" +
                              "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                              "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                              "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n" +
                              "/disk - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö\n" +
                              "/processes - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n" +
                              "/network - –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" +
                              "/subscribe - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
                              "/unsubscribe - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                        cancellationToken: cancellationToken);
                    break;

                case "/status":
                    _monitor.MonitorCpuUsage(out double cpu);
                    _monitor.MonitorMemoryUsage(out double mem);
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"üíª –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:\n" +
                              $"–ó–∞–≥—Ä—É–∑–∫–∞ –¶–ü: {cpu:0.00}%\n" +
                              $"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {mem:0.00}%",
                        cancellationToken: cancellationToken);
                    break;

                case "/disk":
                    var diskOutput = new StringWriter();
                    var diskConsole = Console.Out;
                    Console.SetOut(diskOutput);
                    _monitor.MonitorDiskSpace();
                    Console.SetOut(diskConsole);
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:\n{diskOutput}",
                        cancellationToken: cancellationToken);
                    break;

                case "/processes":
                    var processOutput = new StringWriter();
                    var processConsole = Console.Out;
                    Console.SetOut(processOutput);
                    _monitor.MonitorTopProcesses();
                    Console.SetOut(processConsole);
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"‚öôÔ∏è –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n{processOutput}",
                        cancellationToken: cancellationToken);
                    break;

                case "/network":
                    var networkOutput = new StringWriter();
                    var networkConsole = Console.Out;
                    Console.SetOut(networkOutput);
                    _monitor.MonitorNetworkActivity();
                    Console.SetOut(networkConsole);
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"üåê –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n{networkOutput}",
                        cancellationToken: cancellationToken);
                    break;

                case "/subscribe":
                    if (_subscribedChats.Add(chatId))
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–µ–≤—ã—Å—è—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.",
                            cancellationToken: cancellationToken);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                            cancellationToken: cancellationToken);
                    }
                    break;

                case "/unsubscribe":
                    if (_subscribedChats.Remove(chatId))
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                            cancellationToken: cancellationToken);
                    }
                    else
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                            cancellationToken: cancellationToken);
                    }
                    break;

                default:
                    await _botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                        cancellationToken: cancellationToken);
                    break;
            }
        }

        private Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            var errorMessage = exception switch
            {
                ApiRequestException apiRequestException =>
                    $"Telegram API Error:\n{apiRequestException.ErrorCode}\n{apiRequestException.Message}",
                _ => exception.ToString()
            };

            Console.WriteLine(errorMessage);
            return Task.CompletedTask;
        }
    }
}
